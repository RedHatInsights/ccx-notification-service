// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	types "github.com/RedHatInsights/ccx-notification-service/types"
)

// Producer is an autogenerated mock type for the Producer type
type Producer struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *Producer) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ProduceMessage provides a mock function with given fields: msg
func (_m *Producer) ProduceMessage(msg types.ProducerMessage) (int32, int64, error) {
	ret := _m.Called(msg)

	var r0 int32
	if rf, ok := ret.Get(0).(func(types.ProducerMessage) int32); ok {
		r0 = rf(msg)
	} else {
		r0 = ret.Get(0).(int32)
	}

	var r1 int64
	if rf, ok := ret.Get(1).(func(types.ProducerMessage) int64); ok {
		r1 = rf(msg)
	} else {
		r1 = ret.Get(1).(int64)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(types.ProducerMessage) error); ok {
		r2 = rf(msg)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

type mockConstructorTestingTNewProducer interface {
	mock.TestingT
	Cleanup(func())
}

// NewProducer creates a new instance of Producer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewProducer(t mockConstructorTestingTNewProducer) *Producer {
	mock := &Producer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
